" Set leader to comma
let mapleader = ","

" Generic settings
set encoding=utf-8
set mouse=a

" Indenting stuff
set tabstop=2
set shiftwidth=2
set nosmartindent " As smartindent conflicts with filetype
set nocindent
set smarttab

set smartcase
set wrap
set whichwrap+=<,>,h,l
set linebreak
set showbreak=~\ \ \ 

set backspace=indent,eol,start

" UI, mostly
set number " We'll default to this. <Leader>nn switches to relativenumber
set ruler
set cmdheight=3
set showcmd
set showmode
set scrolloff=2
set novisualbell
set noerrorbells
set nohidden

" Status line
set laststatus=2
" set statusline=
set statusline=%-3.3n " buffer number
set statusline+=%f " filename
set statusline+=%h%m%r%w " status flags
set statusline+=\ ft=%{strlen(&ft)?&ft:'none'} " file type
if exists("*Tlist_Get_Tagname_By_Line")
	set statusline+=\ [%{Tlist_Get_Tagname_By_Line()}] " file type
endif
set statusline+=%= " right align remainder
set statusline+=\%4.8b " character value
set statusline+=/0x%-8B " character value
set statusline+=%-14(%l,%c%V%) " line, character
set statusline+=%<%P/%L " file position

" Split stuff
set noequalalways " Don't resize splits when closing windows
set splitright
" set splitbelow

" For browser weenies
nnoremap <space> 
nnoremap <S-space> 

" Folding
set foldmethod=indent
set foldlevel=100

" Highlighting search
set showmatch
set matchpairs+=<:>
set hlsearch
noremap <leader>h :let @/ = ""<CR> " clear search pattern to disable hlsearch
map <leader>n :noh<CR> " Turn off hlsearch until the next search

" Syntax stuff
filetype plugin indent on
syntax enable
map <leader>s :syntax enable<CR>
map <leader>hi :so $VIMRUNTIME/syntax/hitest.vim<CR>

" PURDY COLORZ
let g:CSApprox_verbose_level = 0
set bg=dark
colorscheme molokai
"colorscheme mustang
"colorscheme wombat256
" map <silent><F2> :PREVCOLOR<cr>
" map <silent><F3> :NEXTCOLOR<cr>

if has("gui_running")
	set guioptions-=T
	set guitablabel=%M%t
	set cursorline
	hi ColorColumn ctermbg=darkgrey guibg=#232526
	hi SpecialKey guifg=#444444
	hi NonText guifg=#444444 guibg=bg
	hi Todo gui=undercurl
	" @TODO muk
	" We only want this for GUI vim
	" autocmd BufWinLeave *.* silent mkview
	" autocmd BufWinEnter *.* silent loadview
endif

if exists("&colorcolumn")
	set colorcolumn=80
else
	" Hightlight the end of long lines (>120 chars)
	" http://blog.ezyang.com/2010/03/vim-textwidth/
	" augroup vimrc_autocmds
	"	 autocmd BufRead * match OverLength /\%120v.*/
	"	 autocmd BufRead * highlight OverLength none
	"	 map <Leader>l :highlight OverLength ctermbg=darkgrey guibg=#592929<CR>
	"	 map <Leader>L :highlight OverLength none<CR>
	" augroup END
endif

" Netrw stuff
let g:netrw_liststyle=1
" let g:netrw_browse_split = 4
let g:netrw_silent = 1
let g:netrw_list_hide='\.pyc,^\..*'
let g:netrw_sort_sequence='[\/]$,TODO$,INSTALLATION$,README$,\<core\%(\.\d\+\)\=\>,^\.,\.h$,\.c$,\.cpp$,\.php$,\.py$,\.html$,*,\.o$,\.obj$,\.txt$,\.info$,\.swp$,\.bak$,\.pyc$,\~$,\.[dmg|xcf|jpg|png]$'
let g:explHideFiles='^\.,.*\.pyc$,.svn'
let g:netrw_alto = 1 " open o-splits at the bottom
let g:netrw_altv = 1 " open v-splits to the right
" let g:netrw_winsize = 35
" let g:netrw_preview = 1

if has('gui_macvim')
	behave xterm
	set selectmode=
	set keymodel=
	set mousemodel=popup_setpos
	" set noantialias
	set gfn=Inconsolata-dz:h12
	set gfn=EnvyCodeR:h13
	" set gfn=Monaco:h10
	" set antialias
	" set gfn=Consolas:h12
	" set transp=2
	let macvim_skip_cmd_opt_movement = 1
	let macvim_hig_shift_movement = 1
	let g:netrw_browsex_viewer='open'
	map <S-D-[> :tabprevious<CR>
	map <S-D-]> :tabnext<CR>
	set linespace=4

	set fuoptions=maxvert,maxhorz,background:Normal " Fullscreen options

	let g:netrw_ctags='/opt/local/bin/ctags'
	let Tlist_Ctags_Cmd='/opt/local/bin/ctags'
else
	let g:netrw_ctags='/usr/bin/ctags'
	let Tlist_Ctags_Cmd='/usr/bin/ctags'
	" let Tlist_Ctags_Cmd='/usr/bin/ctags -v'
endif

" set textwidth=90
set formatoptions=tcqn " see :help fo-table for letter meaning


" Move temporary files to ~/.vimtmp/ instead of current dir
if ! isdirectory(expand('~/.vimtmp'))
   call mkdir(expand('~/.vimtmp'))
endif
if isdirectory(expand('~/.vimtmp'))
   set directory=~/.vimtmp
else
   set directory=.,/var/tmp,/tmp
endif

" Lets :GLVS actually install stuff
let g:GetLatestVimScripts_allowautoinstall=1

autocmd FileType html set ft=html.javascript.css.smarty
autocmd BufRead,BufNewFile *.smarty set ft=smarty.html.javascript
autocmd BufRead,BufNewFile,BufEnter *.json set ft=javascript
autocmd BufRead,BufNewFile,BufEnter *.ejs set ft=javascript

" From http://github.com/devjj/vim-config/blob/master/.vimrc After editing, run
autocmd! bufwritepost .vimrc source ~/.vimrc
map <leader>vv :tabe ~/.vimrc<CR>
map <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" SnippetsEmu stuff
function! ReloadSnippets( snippets_dir, ft )
	if strlen( a:ft ) == 0
		let filetype = "_"
	else
		let filetype = a:ft
	endif

	call ResetSnippets()
	call GetSnippets( a:snippets_dir, filetype )
endfunction
nmap <leader>rr :call ReloadSnippets(snippets_dir, &filetype)<CR>
let g:snips_author="Max Roeleveld"
" autocmd bufwritepost snippet :call ReloadSnippets(snippets_dir, &filetype)<CR>

" Allow me to switch between number and relativenumber
function! SwitchNumbering()
	if &number && ! &relativenumber
		set relativenumber
	elseif ! &number && &relativenumber
		set number
	endif
endfunction
nmap <leader>nn :call SwitchNumbering()<CR>

" Add a status line by default
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
" set laststatus=2

" Session saving
" set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize 
" set sessionoptions=resize,winsize 

" Invisible characters *********************************************************
set listchars=trail:·,tab:‣‒,eol:¬,extends:«,precedes:»
set nolist
noremap <leader>i :set list!<CR> " Toggle invisible chars"

map <leader>cd :cd %:p:h<CR>

nnoremap <leader>c :set cursorline!<CR>
nnoremap <leader>C :set cursorcolumn!<CR>

" http://www.sontek.net/Python-with-a-modular-IDE-(Vim)
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\" 
autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
set suffixes=.bak,~,.o,.h,.info,.swp,.obj,.pyc,.pyo
set tags+=tags;/
set tags+=$HOME/.vim/tags/python.ctags

" TagList
map <leader>t :TlistToggle<CR>
let Tlist_Sort_Type = "order"
let Tlist_Use_SingleClick = 1
let Tlist_Show_Menu = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Enable_Fold_Column = 1
let Tlist_Close_On_Select = 0
let Tlist_Use_Right_Window = 0
let Tlist_Process_File_Always=1
let Tlist_Show_One_File=1
let Tlist_Display_Prototype=1
let Tlist_Max_Submenu_Items=50
let Tlist_Max_Tag_Length=30

map <silent><A-Right> :bnext!<CR> 
map <silent><A-Left> :bprevious!<CR> 

" MiniBufExplorer -- currently not used
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapCTabSwitchBufs = 1

" Stop the beeping AND flashing
set vb t_vb=".

" Cycling between buffers
map <c-tab> :bn<cr>
map <s-c-tab> :bp<cr>

" Quick jumping between splits
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <S-C-H> :bp<CR>
map <S-C-L> :bn<CR>
" vmap ' c'<c-r>"'<esc>
" vmap " c"<c-r>""<esc>
" vmap ( c(<c-r>")<esc>

" Remap num island to proper numbers
:inoremap <Esc>Oq 1
:inoremap <Esc>Or 2
:inoremap <Esc>Os 3
:inoremap <Esc>Ot 4
:inoremap <Esc>Ou 5
:inoremap <Esc>Ov 6
:inoremap <Esc>Ow 7
:inoremap <Esc>Ox 8
:inoremap <Esc>Oy 9
:inoremap <Esc>Op 0
:inoremap <Esc>On .
:inoremap <Esc>OQ /
:inoremap <Esc>OR *
:inoremap <Esc>Ol +
:inoremap <Esc>OS -

" If I want help, I'll ask for it (instead of inadvertly hit my F1 when I
" actually wanted ESC)
nmap <F1> <Esc>

" NERDCommenter stuff
let g:NERDRemoveExtraSpaces=1
let g:NERDSpaceDelims=1
let g:NERDComInsertMap='<c-c>'
let g:NERDCustomDelimiters = { 'html': { 'left': '<!--', 'right': '-->'}}

" WinManager
map <c-w><c-b> :BottomExplorerWindow<cr>
map <c-w><c-f> :FirstExplorerWindow<cr>
map <c-w><c-t> :WMToggle<cr>
let g:winManagerWidth=40
let g:winManagerWindowLayout = "FileExplorer,TagList|BufExplorer"

" Favourites for file-explorer
let g:favDirs='/Volumes/max.hotels.local/svn/hotelveiling/branches/hotelveiling-2.0/Application/'."\n"

" SVN stuff
command! Svnadd execute "!svn add %" | execute "!svn propset svn:keywords Id %"

