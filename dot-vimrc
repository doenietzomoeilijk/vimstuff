" vim: set filetype=vim foldmethod=marker foldlevel=1 et:

" Run Pathogen. Always has to be run first.
call pathogen#infect()
call pathogen#helptags()

" Set leader to comma
let mapleader = ","

" Generic settings {{{
set encoding=utf-8
set mouse=a
" }}}

" Indenting and wrapping {{{
set tabstop=2
set shiftwidth=2
set nosmartindent " As smartindent conflicts with filetype
set nocindent
set smarttab
set expandtab
set shiftround

set ignorecase smartcase
set nowrap " We just CODE to the correct width, bitches!
set whichwrap+=<,>,h,l
set linebreak
set showbreak=~\ \ \ 

set backspace=indent,eol,start

nnoremap <leader>c :set cursorline!<CR>
nnoremap <leader>C :set cursorcolumn!<CR>
" }}}

" UI, mostly {{{
set number " We'll default to this. <Leader>nn switches to relativenumber
set ruler
set cmdheight=3 " Give us some room for feedback. Prevents 90% of 'Press enter
                " to continue'.
set showcmd
set showmode
set scrolloff=2
set novisualbell
set noerrorbells
set hidden

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
" }}}

" Wildmenu {{{
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn
set wildignore+=.DS_Store,.AppleDouble
set wildignore+=.pyc
set wildignore+=.swp
" }}}

" Split stuff
set equalalways
set eadirection=hor
set splitright

" Resize windows on metawindow resize
autocmd VimResized * exe "normal! \<c-w>="

" For browser weenies
" nnoremap <space> 
" nnoremap <S-space> 

" For everyone who uses wrap
nnoremap j gj
nnoremap k gk

" Keep visual selection after indenting
" vnoremap < <gv
" vnoremap > >gv

" Write with sudo
cnoremap w!! w !sudo tee % >/dev/null

" Paste with auto-indent
nnoremap <Leader>p p'[v']=
nnoremap <Leader>P P'[v']=

" Folding
set foldmethod=indent
set foldlevel=100

" Highlighting search
set showmatch
set matchpairs+=<:>
set hlsearch
set incsearch

nnoremap <S-CR> :nohlsearch<S-CR> " Setting it to enter mucked with error windows.
noremap <leader>h :let @/ = ""<CR> " clear search pattern to disable hlsearch

" Syntax stuff
filetype plugin indent on
syntax enable
" noremap <leader>s :syntax enable<CR>
noremap <leader>hi :so $VIMRUNTIME/syntax/hitest.vim<CR>

" PURDY COLORZ
let g:CSApprox_verbose_level = 0
set bg=dark
" colorscheme molokai
"colorscheme mustang
"colorscheme wombat256
colorscheme xoria256
" map <silent><F2> :PREVCOLOR<CR>
" map <silent><F3> :NEXTCOLOR<CR>

if has("gui_running")
  set guioptions-=T " No toolbar
  set guioptions-=r " No right scrollbar
  set guioptions-=L " No left scrollbar
  set guioptions+=g " Grey menu items instead of hiding them
  set guioptions+=i " Icons are nifty
  set guitablabel=%M%t
  set cursorline
  " hi SpecialKey guifg=#444444
  " hi NonText guifg=#444444 guibg=bg
  " hi VertSplit guifg=#000000 guibg=#000000
  " hi Todo gui=undercurl
endif

" A nice EOL guide column. {{{
if exists("&colorcolumn")
  set colorcolumn=80
  hi ColorColumn ctermbg=237 guibg=#232526
endif
" }}}

" Netrw stuff {{{
let g:netrw_liststyle=1 " long listing
" let g:netrw_browse_split = 4
let g:netrw_silent=1 " We don't need to hear about transfers
let g:netrw_alto=1 " open o-splits at the bottom
let g:netrw_altv=1 " open v-splits to the right
let g:netrw_list_hide='\.pyc,^\..*'
let g:netrw_sort_sequence='[\/]$,TODO$,INSTALLATION$,README$,\<core\%(\.\d\+\)\=\>,^\.,\.h$,\.c$,\.cpp$,\.php$,\.py$,\.html$,*,\.o$,\.obj$,\.txt$,\.info$,\.swp$,\.bak$,\.pyc$,\~$,\.[dmg|xcf|jpg|png]$'
let g:explHideFiles='^\.,.*\.pyc$,.svn'
" let g:netrw_winsize = 35
" let g:netrw_preview = 1
" }}}

if has('gui_macvim')
  behave xterm
  set selectmode=
  set keymodel=
  set mousemodel=popup_setpos
  " set noantialias
  " set gfn=EnvyCodeR:h13
  set gfn=Anonymous\ Pro\ for\ Powerline:h15
  " set gfn=Inconsolata-dz:h12
  let macvim_skip_cmd_opt_movement = 1
  let macvim_hig_shift_movement = 1
  let g:netrw_browsex_viewer='open'
  map <S-D-[> :tabprevious<CR>
  map <S-D-]> :tabnext<CR>
  set linespace=4

  set fuoptions=maxvert,maxhorz,background:Normal " Fullscreen options

  " let g:netrw_ctags='/opt/local/bin/ctags'
  " let Tlist_Ctags_Cmd='/opt/local/bin/ctags'
else
  " let g:netrw_ctags='/usr/bin/ctags'
  " let Tlist_Ctags_Cmd='/usr/bin/ctags'
endif

set textwidth=80
set formatoptions=lcqn " see :help fo-table for letter meaning

" BACKUP AND UNDO STUFF {{{

" Directories that have // at the end will be expanded to the full file path
" See: http://stackoverflow.com/questions/4331776/change-vim-swap-backup-undo-file-name/4331812#4331812

" Move temporary files to ~/.vimtmp/ instead of current dir
if ! isdirectory(expand('~/.vimtmp'))
   call mkdir(expand('~/.vimtmp'))
endif
if isdirectory(expand('~/.vimtmp'))
   set directory=~/.vimtmp//
else
   set directory=.,/var/tmp//,/tmp//
endif

" Save tons of history and undo (Thanks, Arnout)
set history=10000
set undolevels=10000

" Set persistent undo, only works on >73
if exists("&undodir") && exists("&undofile")
  " Setup persistently store the undo folder
  if ! isdirectory(expand('~/.vimundo'))
    call mkdir(expand('~/.vimundo'))
  endif
  set undodir=~/.vimundo
  set undofile
endif

set backupskip=/tmp/*,/private/tmp/*" 
if ! isdirectory(expand('~/.vimbackup'))
  call mkdir(expand('~/.vimbackup'))
endif
set backupdir=~/.vimbackup//
" set backup
"

" }}}

" {{{ Filetypes
augroup Filetypes
  autocmd!
  autocmd BufRead,BufNewFile *.smarty setlocal ft=smarty.html
  autocmd BufRead,BufNewFile,BufEnter *.json setlocal ft=javascript
  autocmd BufRead,BufNewFile,BufEnter *.ejs setlocal ft=javascript
  autocmd BufRead,BufNewFile,BufEnter *.md setlocal ft=markdown
  autocmd BufRead,BufNewFile,BufEnter *.tt2 set ft=tt2html
  autocmd BufRead,BufEnter */hotelmodules-*/*.class setlocal ft=php
  autocmd FileType markdown setlocal formatoptions+=t showbreak= nonumber
  autocmd FileType perl setlocal tabstop=4 shiftwidth=4 
  autocmd FileType php setlocal keywordprg=pman
augroup END
" }}}

" Editing the .vimrc file {{{
" From http://github.com/devjj/vim-config/blob/master/.vimrc After editing, run
augroup Vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC | call Pl#ReloadColorscheme() | exec 'echom "vimrc reloaded after save."'
augroup END

noremap <leader>vv :vsplit $MYVIMRC<CR>
noremap <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:echom 'vimrc reloaded'<CR>
" }}}

" Snippets {{{
let g:snippets_dir="~/.vim/my_snips/"
let g:snips_author="Max Roeleveld"
let g:snips_company="Hotels.nl"
" autocmd bufwritepost snippet :call ReloadSnippets(snippets_dir, &filetype)<CR>
" }}}

" Allow me to switch between number and relativenumber. Vim >= 7.3
function! SwitchNumbering()
  if exists("&relativenumber")
    if &number && ! &relativenumber
      set relativenumber
    elseif ! &number && &relativenumber
      set number
    endif
  else
    echo "Your VIM doesn't support relativenumber!"
  endif
endfunction
nnoremap <leader>nn :call SwitchNumbering()<CR>

" Invisible characters {{{
set listchars=trail:·,tab:‣‒,eol:¬,extends:«,precedes:»
set nolist
noremap <leader>i :set list!<CR> " Toggle invisible chars"
" }}}

noremap <leader>cd :cd %:p:h<CR>

augroup python
  " http://www.sontek.net/Python-with-a-modular-IDE-(Vim)
  autocmd!
  autocmd FileType python set omnifunc=pythoncomplete#Complete
  autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\" 
  autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
augroup END

set suffixes=.bak,~,.o,.h,.info,.swp,.obj,.pyc,.pyo
" set tags+=tags;/
" set tags+=$HOME/.vim/tags/php.tags
" set tags+=$HOME/.vim/tags/python.ctags

set tags=./tags,tags,$HOME/.vim/tags/php.tags,$HOME/.vim/tags/Zend.tags

" Fugitive {{{
augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* setlocal bufhidden=delete " Kill git buffs on close
augroup END
" }}}

" TagList {{{
noremap <leader>t :TlistToggle<CR>
let Tlist_Sort_Type="order"
let Tlist_Use_SingleClick=1
let Tlist_Show_Menu=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Enable_Fold_Column=1
let Tlist_Close_On_Select=0
let Tlist_Use_Right_Window=0
let Tlist_Process_File_Always=1
let Tlist_Show_One_File=1
let Tlist_Display_Prototype=1
let Tlist_Max_Submenu_Items=50
let Tlist_Max_Tag_Length=50

" Disable that slow stuff for now, it really chokes a bitch on larger minified
" javascript files:
let Tlist_javascript_Ctags_Cmd='ctags'
" }}}


" Syntastic {{{
" let g:syntastic_mode_map={ 'mode': 'passive',
"                            \ 'active_filetypes': [],
"                            \ 'passive_filetypes': ['html', 'html.php'] }
" let g:syntastic_check_on_open=1
" let g:syntastic_enable_signs=1
" let g:syntastic_enable_balloons=1
" let g:syntastic_enable_highlighting=1
" let g:syntastic_echo_current_error=0
" let g:syntastic_stl_format = '[%E{Err:%e}%B{, }%W{Warn:%w}]'
" let g:syntastic_auto_loc_list=0
let g:syntastic_phpcs_conf="--standard=Hotelsnl --tab-width=2 --ignore=*/templates/*"

noremap <leader>st :SyntasticToggleMode<CR>
noremap <leader>sc :SyntasticCheck<CR>
noremap <leader>se :Errors<CR>
" }}}


" MiniBufExplorer -- currently not used
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapCTabSwitchBufs = 1

" Stop the beeping AND flashing
set vb t_vb=".

" Re-select text you just pasted so you can indent it and stuff
nnoremap <leader>q gqip

" Cycling between buffers
noremap <C-Tab> :bn<CR>
noremap <S-C-Tab> :bp<CR>

" Quick jumping between splits and buffers
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l
" noremap <S-C-H> :bp<CR>
" noremap <S-C-L> :bn<CR>
noremap <silent><A-Right> :bnext!<CR> 
noremap <silent><A-Left> :bprevious!<CR> 

" Why didn't I think of these earlier?
inoremap <C-E> <End>
inoremap <C-A> <Home>

" Uppercase / lowercase current word
nnoremap <Leader>U viwU
nnoremap <Leader>u viwu

" Remap num island to proper numbers
:inoremap <Esc>Oq 1
:inoremap <Esc>Or 2
:inoremap <Esc>Os 3
:inoremap <Esc>Ot 4
:inoremap <Esc>Ou 5
:inoremap <Esc>Ov 6
:inoremap <Esc>Ow 7
:inoremap <Esc>Ox 8
:inoremap <Esc>Oy 9
:inoremap <Esc>Op 0
:inoremap <Esc>On .
:inoremap <Esc>OQ /
:inoremap <Esc>OR *
:inoremap <Esc>Ol +
:inoremap <Esc>OS -

" If I want help, I'll ask for it (instead of inadvertly hit my F1 when I
" actually wanted ESC)
noremap <F1> <Esc>

" j is on the home row, Esc isn't, and we don't use j all that much anyway.
inoremap jj <Esc>
inoremap JJ <Esc>

" Hey, F5 wasn't used yet. Let's map :make to that!
noremap <F5> :make<CR>

" Search for diff separater stuff
nnoremap <Leader>fd /^<<<<<<<\\|^=======\\|^>>>>>>><CR>

" NERDCommenter {{{
let g:NERDRemoveExtraSpaces=1
let g:NERDSpaceDelims=1
let g:NERDComInsertMap='<c-c>'
let g:NERDCustomDelimiters = { 'html': { 'left': '<!--', 'right': '-->'}}
" }}}

" WinManager {{{
noremap <c-w><c-b> :BottomExplorerWindow<CR>
noremap <c-w><c-f> :FirstExplorerWindow<CR>
noremap <c-w><c-t> :WMToggle<CR>
let g:winManagerWidth=40
let g:winManagerWindowLayout = "FileExplorer,TagList|BufExplorer"
" }}}

" Gundo {{{
noremap <c-w><c-g> :GundoToggle<CR>
" }}}

" Ctrl-P {{{
let g:ctrlp_use_caching=1
let g:ctrlp_working_path_mode=1
let g:ctrlp_custom_ignore={
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$'
  \ }
let g:ctrlp_by_filename=1
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMRUFiles<CR>
nnoremap <leader>cp :CtrlPCurFile<CR>
nnoremap <leader>cr :CtrlPRoot<CR>

let g:Powerline_symbols = 'fancy'
let g:solarized_termcolors=256

" CtrlP buffer list
" if exists("*CtrlPBuffer")
" endif
" }}}

" PHP stuff {{{
" Disable auto-php-folding if PIV is plugged in
let g:DisableAutoPHPFolding=1
let g:PHP_vintage_case_default_indent = 1
let php_noShortTags=0
let php_sql_query=0
let php_htmlInStrings=0
let php_folding=0
let PHP_outdentphpescape=0
" }}}

" Favourites for file-explorer
let g:favDirs='/Volumes/home/git/'."\n"


" Statusline goodness {{{
set laststatus=2

" Stolen from http://www.reddit.com/r/vim/comments/gexi6/a_smarter_statusline_code_in_comments/
" Currently no longer used because of PowerLine...
" hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
" hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

" function! MyStatusLine(mode)
"   let statusline=""
"   if a:mode == 'Enter'
"     let statusline.="%#StatColor#"
"   endif
"   let statusline.="\(%n\)\ %f\ "
"   if a:mode == 'Enter'
"     let statusline.="%*"
"   endif
"   let statusline.="%#Modified#%m"
"   if a:mode == 'Leave'
"     let statusline.="%*%r"
"   elseif a:mode == 'Enter'
"     let statusline.="%r%*"
"   endif

"   if exists("*Tlist_Get_Tagname_By_Line")
"     let statusline .= "\ [%{Tlist_Get_Tagname_By_Line()}]" " file type
"   endif

"   if exists("*fugitive#statusline") " Show current Git branch, if available
"     let statusline .= "%{fugitive#statusline()}"
"   endif

"   let statusline .= "\ (%l/%L,\ %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "

"   if exists("*SyntasticStatuslineFlag")
"     let statusline .= "%{SyntasticStatuslineFlag()}"
"   endif   

"   return statusline
" endfunction

" function! InsertStatuslineColor(mode)
"   if a:mode == 'i'
"     hi StatColor guibg=orange ctermbg=lightred
"   elseif a:mode == 'r'
"     hi StatColor guibg=#e454ba ctermbg=magenta
"   elseif a:mode == 'v'
"     hi StatColor guibg=#e454ba ctermbg=magenta
"   else
"     hi StatColor guibg=red ctermbg=red
"   endif
" endfunction 

" augroup WinStatusLine
"   autocmd!
"   autocmd WinEnter * setlocal statusline=%!MyStatusLine('Enter')
"   autocmd WinLeave * setlocal statusline=%!MyStatusLine('Leave')
"   autocmd InsertEnter * call InsertStatuslineColor(v:insertmode)
"   autocmd InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
" augroup END

" set statusline=%!MyStatusLine('Enter')
" }}}

" Code defuckination {{{
" Fix commas
vnoremap <Leader>,, :s/, \@!\(.\+\)/, \1/g<CR>

function! FixLeCode()
  " Add surrounding spaces to <=, =>, == etc.
  :%s/\(!\|+\|-\|\.\|=\|<\|>\)\@<!\(=\|==\|===\|=>\|+=\|-=\)\( \|>\|=\)\@!/ \2 /g
  :g/function/s/ = /=/g

  " No line should end in a space, ever
  :%s/\s\+$//g

  " Pull braces to the same line where the funciton started
  :g/^\s*\(\(public\|private\) \)\?function .\+)$/j
endfunction

" Keep some space between if/for/foreach/while and the paren'd part, also keep
" some space between the closing paren and the opening brace
function! FixSpaceBrace()
  :%s/\(if\|elseif\|for\|foreach\|while\)(/\1 (/g
  :%s/){/) {/g
  :%s/function \(\w\+\) (/function \1(/g
endfunction

function! DeEscapeCodify()
  " Removes ANSI escape codes, at least from Javascript
  :%s/\\x1b\[\(\d\+;\)*\d\+m//g
endfunction

" Remove whitespace from code files on save
function! StripTrailingWhite()
  let l:winview = winsaveview()
  silent! %s/\s\+$//
  call winrestview(l:winview)
endfunction
autocmd BufWritePre *.{php,py,pl,js,css,html} call StripTrailingWhite()
" }}}

function! MakeDashed(symbol)

  " @TODO zoeken naar *enige* whitespace aan het begin van de regel, en daar
  " onze x mee vullen.
  " 
  " Dan de x aanvullen met overige muk.


  " We start with an empty string
  let @x = ''

  " Let's figure out how long this line is, anyway
  let linelength = col("$")

  " Get to the start of the line, and record its position.
  normal ^
  let startOfLine = col('.')
  echom 'startOfLine=' . startOfLine

  " Now get to the end and enter to the next line. If this line's commented,
  " we'll continue the comment.
  normal A
  let cursorpos = getpos('.')

  " If the column we're on *now* is lower than the start-of-line of our previous
  " line, we're NOT in a comment. Vim collapses a line with just spaces/tabs on
  " it, so we'll need to account for that.
  if cursorpos[2] < startOfLine
    @x = repeat(' ', startOfLine)
  endif

  " moet iets met getpos('.') worden om begin vorige regel te vinden
  echom 'currentcolumn='.cursorpos[2]
  let @x = @x . repeat(a:symbol, linelength - cursorpos[2] - 1)
  normal "xp
endfunction
nnoremap <Leader>== :call MakeDashed('=')<CR>
nnoremap <Leader>-- :call MakeDashed('-')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" EXTRACT VARIABLE (SKETCHY
" Stolen from https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
"   but handling PHP was my own idea =]
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ExtractVariable()
  " Pre-set stuff.
  let eol_marker = ''
  let needs_semicolon = ['php','javascript','perl']
  let needs_dollar = ['php']

  " Get the varname
  let name = input("Variable name: ")
  if name == ''
    return
  endif

  " Some filetypes need a $ in front of their strings
  if &ft == 'php'
    let name = '$' . name
  endif

  " Some filetypes need a ; at the end of their newly created line
  if index(needs_semicolon, &ft) >= 0
    let eol_marker = ';'
  endif

  " Enter visual mode (not sure why this is needed since we're already in
  " visual mode anyway)
  normal! gv

  " Replace selected text with the variable name
  exec "normal c" . name
  " Define the variable on the line above
  exec "normal! O" . name . " = "
  " Paste the original selected text to be the variable value
  normal! $p
  if eol_marker != ''
    exec "normal A" . eol_marker
  endif
endfunction
vnoremap <leader>rv :call ExtractVariable()<cr>

" Hexy tiem
nnoremap <leader>hon :%!xxd<cr>
nnoremap <leader>hof :%!xxd -r<cr>

function! QFtoArgs()
  let x={}
  for d in getqflist()
    let x[bufname(d.bufnr)]=1
  endfor
  exec 'args' join(keys(x))
endfunction
nnoremap <Leader>qa :call QFtoArgs()
